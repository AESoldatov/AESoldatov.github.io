<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Academic</title>
    <link>https://example.com/post/</link>
      <atom:link href="https://example.com/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Sat, 27 Apr 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://example.com/post/</link>
    </image>
    
    <item>
      <title>Прошлая неделя!</title>
      <link>https://example.com/post/%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%B0%D1%8F-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</link>
      <pubDate>Sat, 27 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%B0%D1%8F-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F/</guid>
      <description>&lt;h1 id=&#34;понедельни&#34;&gt;Понедельни&lt;/h1&gt;
&lt;p&gt;Был тяжелый день&lt;/p&gt;
&lt;h1 id=&#34;вторник&#34;&gt;Вторник&lt;/h1&gt;
&lt;p&gt;Был тяжелый день&lt;/p&gt;
&lt;h1 id=&#34;среда&#34;&gt;Среда&lt;/h1&gt;
&lt;p&gt;Был тяжелый день&lt;/p&gt;
&lt;h1 id=&#34;четверг&#34;&gt;Четверг&lt;/h1&gt;
&lt;p&gt;Был тяжелый день&lt;/p&gt;
&lt;h1 id=&#34;пятница&#34;&gt;Пятница&lt;/h1&gt;
&lt;p&gt;Был тяжелый день&lt;/p&gt;
&lt;h1 id=&#34;суббота&#34;&gt;Суббота&lt;/h1&gt;
&lt;p&gt;Был не такой уж и тяжелый день&lt;/p&gt;
&lt;h1 id=&#34;воскресенье&#34;&gt;Воскресенье&lt;/h1&gt;
&lt;p&gt;Был классный день, но мне не хватило&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Создание презентаций</title>
      <link>https://example.com/post/%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%B5%D0%B7%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B8/</link>
      <pubDate>Wed, 24 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%B5%D0%B7%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B8/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Сформулируйте тему&lt;/li&gt;
&lt;li&gt;Определите цель&lt;/li&gt;
&lt;li&gt;Продумайте сценарий&lt;/li&gt;
&lt;li&gt;Покажите примеры&lt;/li&gt;
&lt;li&gt;Чередуйте слайды&lt;/li&gt;
&lt;li&gt;Скажите, что делать дальше&lt;/li&gt;
&lt;li&gt;Меньше цветов&lt;/li&gt;
&lt;li&gt;Больше контраста&lt;/li&gt;
&lt;li&gt;Меньше шрифтов&lt;/li&gt;
&lt;li&gt;Тексты короче&lt;/li&gt;
&lt;li&gt;Добавьте изображения&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Язык разметки Markdown</title>
      <link>https://example.com/post/%D1%8F%D0%B7%D1%8B%D0%BA-%D1%80%D0%B0%D0%B7%D0%BC%D0%B5%D1%82%D0%BA%D0%B8-markdown/</link>
      <pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/%D1%8F%D0%B7%D1%8B%D0%BA-%D1%80%D0%B0%D0%B7%D0%BC%D0%B5%D1%82%D0%BA%D0%B8-markdown/</guid>
      <description>&lt;h1 id=&#34;22-теоретическое-введение&#34;&gt;2.2. Теоретическое введение&lt;/h1&gt;
&lt;p&gt;Markdown — это простой язык разметки, используемый для создания форматированного текста (например, HTML) с помощью текстового редактора. Он позволяет добавлять к тексту базовое форматирование, используя символы, известные и доступные на всех клавиатурах. Размер шрифта, цвет и другие расширенные параметры недоступны в Markdown&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Управление версиями. Git!</title>
      <link>https://example.com/post/%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B8-git/</link>
      <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B8-git/</guid>
      <description>&lt;h1 id=&#34;22-теоретическое-введение&#34;&gt;2.2. Теоретическое введение&lt;/h1&gt;
&lt;h2 id=&#34;221-системы-контроля-версий-общие-понятия&#34;&gt;2.2.1. Системы контроля версий. Общие понятия&lt;/h2&gt;
&lt;p&gt;Системы контроля версий (Version Control System, VCS) применяются при работе
нескольких человек над одним проектом. Обычно основное дерево проекта хранится в
локальном или удалённом репозитории, к которому настроен доступ для участников про-
екта. При внесении изменений в содержание проекта система контроля версий позволяет
их фиксировать, совмещать изменения, произведённые разными участниками проекта,
производить откат к любой более ранней версии проекта, если это требуется.
В классических системах контроля версий используется централизованная модель, пред-
полагающая наличие единого репозитория для хранения файлов. Выполнение большинства
функций по управлению версиями осуществляется специальным сервером. Участник про-
екта (пользователь) перед началом работы посредством определённых команд получает
нужную ему версию файлов. После внесения изменений, пользователь размещает новую
версию в хранилище. При этом предыдущие версии не удаляются из центрального хранили-
ща и к ним можно вернуться в любой момент. Сервер может сохранять не полную версию
изменённых файлов, а производить так называемую дельта-компрессию — сохранять только
изменения между последовательными версиями, что позволяет уменьшить объём хранимых
данных.
Системы контроля версий поддерживают возможность отслеживания и разрешения кон-
фликтов, которые могут возникнуть при работе нескольких человек над одним файлом.
Можно объединить (слить) изменения, сделанные разными участниками (автоматически
или вручную), вручную выбрать нужную версию, отменить изменения вовсе или заблоки-
ровать файлы для изменения. В зависимости от настроек блокировка не позволяет другим
пользователям получить рабочую копию или препятствует изменению рабочей копии файла
средствами файловой системы ОС, обеспечивая таким образом, привилегированный доступ
только одному пользователю, работающему с файлом.
Системы контроля версий также могут обеспечивать дополнительные, более гибкие функ-
циональные возможности. Например, они могут поддерживать работу с несколькими вер-
сиями одного файла, сохраняя общую историю изменений до точки ветвления версий и
собственные истории изменений каждой ветви. Кроме того, обычно доступна информация
о том, кто из участников, когда и какие изменения вносил. Обычно такого рода информация
хранится в журнале изменений, доступ к которому можно ограничить.
В отличие от классических, в распределённых системах контроля версий центральный
репозиторий не является обязательным.
Среди классических VCS наиболее известны CVS, Subversion, а среди распределённых —
Git, Bazaar, Mercurial. Принципы их работы схожи, отличаются они в основном синтаксисом
используемых в работе команд.&lt;/p&gt;
&lt;h2 id=&#34;222-система-контроля-версий-git&#34;&gt;2.2.2. Система контроля версий Git&lt;/h2&gt;
&lt;p&gt;Система контроля версий Git представляет собой набор программ командной строки.
Доступ к ним можно получить из терминала посредством ввода команды git с различными
опциями.
Благодаря тому, что Git является распределённой системой контроля версий, резервную
копию локального хранилища можно сделать простым копированием или архивацией.&lt;/p&gt;
&lt;h2 id=&#34;224-стандартные-процедуры-работы-при-наличии-центрального-репозитория&#34;&gt;2.2.4. Стандартные процедуры работы при наличии центрального репозитория&lt;/h2&gt;
&lt;p&gt;Работа пользователя со своей веткой начинается с проверки и получения изменений из
центрального репозитория (при этом в локальное дерево до начала этой процедуры не
должно было вноситься изменений):
git checkout master
git pull
git checkout -b имя_ветки
Затем можно вносить изменения в локальном дереве и/или ветке.
После завершения внесения какого-то изменения в файлы и/или каталоги проекта необ-
ходимо разместить их в центральном репозитории. Для этого необходимо проверить, какие
файлы изменились к текущему моменту:
git status
и при необходимости удаляем лишние файлы, которые не хотим отправлять в центральный
репозиторий.
Затем полезно просмотреть текст изменений на предмет соответствия правилам ведения
чистых коммитов:
git diff
Если какие-либо файлы не должны попасть в коммит, то помечаем только те файлы,
изменения которых нужно сохранить. Для этого используем команды добавления и/или
удаления с нужными опциями:
git add имена_файлов
git rm имена_файлов
Если нужно сохранить все изменения в текущем каталоге, то используем:
git add .
Затем сохраняем изменения, поясняя, что было сделано:
git commit -am &amp;ldquo;Some commit message&amp;rdquo;
и отправляем в центральный репозиторий:
git push origin имя_ветки
или
git push&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
